generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  password      String?
  emailVerified Boolean    @default(false) @map("email_verified")
  approved      Boolean    @default(false)
  image         String?
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  chatUsers     ChatUser[]
  sentMessages  Message[]  @relation("UserToMessage")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Chat {
  id        String     @id @default(cuid())
  name      String?
  isGroup   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     ChatUser[]
  messages  Message[]
}

model ChatUser {
  id       String   @id @default(cuid())
  chatId   String
  userId   String
  joinedAt DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Message {
  id          String        @id @default(cuid())
  chatId      String
  senderId    String
  content     String
  fileUrl     String?
  fileName    String?
  status      MessageStatus @default(SENT)
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime      @default(now())
  chat        Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User          @relation("UserToMessage", fields: [senderId], references: [id], onDelete: Cascade)
}
